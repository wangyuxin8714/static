1、encodeURI和encodeURIComponent
  这两个方法都会是以utf-8的方式对字符串进行编码，两者的区别：encodeURI只对中文进行编码，
  encodeURIComponent除了中文还会对一些特殊符号(如：/、？、=、&等等)编码
2、ajax跨域
    ajax不允许跨域访问资源，什么情况是跨域呢？
      1）协议不同
            http/https
      2）端口不同
            http://sina.com:8080 去访问 http://sina.com:9999
      3）域名不同
            http://sina.com  去访问  http://hao123.com
     报错信息：
     No 'Access-Control-Allow-Origin'  表示需要跨域

     解决跨域的方式：
              jsonp 是解决跨域的方式
     jsonp原理：动态创建script标签，把请求地址放到script标签的src里面，并且告诉他一个回调函数的名字
     这个回调函数是在我们本地定义的，但是回调函数实在服务端调用的
3、promise es6新增的
    es5：用回调函数(callback)解决异步 、事件监听
    用来解决异步的
    Promise构造函数
    如何使用Promise
    创建一个Promise的实例
    构造函数Promise的参数是一个函数(fn),fn有两个参数(resolve,reject)，这两个参数分别对应成功的函数和失败的函数
    Promise的实例有三种状态：1 成功 resolve 2 失败  reject 3 进行中  pending
promise的实例有一个then方法，该方法有两个参数，第一个参数是成功对应的函数，第二个参数是失败对应的函数；
第二个参数可以省略不写,可以写到catch里面
  p1.then(function(){}).catch(funtion(){})
4、图片的异步加载（预加载）
    提前把图片加载出来，加载完以后从本地缓存获取图片把它加载到页面中
    var img = document.creatElement("img");
    img.src="1.jpg";
    document.body.appendChild(img);
    //异步加载
    var img1 = document.creatElement("img");
        img1.src="1.jpg";
        img1.onload = function(){

        }
5。Promise的两个方法
  Promise.all([p1,p1])  all方法接收一个由多个Promise组成的数组作为参数，返回一个新的Promise实例
  当数组里面的所有的实例都是成功的状态，那么这个新的实例它的状态才是成功,
  并且返回的数据是这多个实例返回的数据组合成的数组
  失败的状态：有一个实例失败，那么这个新实例的状态就是失败，并且新实例返回的数据是最先失败的那个实例的数据

  race
  和all方法类似，接收一个由多个Promise组成的数组作为参数，返回一个新的Promise实例
  哪一个实例最先执行完，该实例对应的状态就是新的实例的状态，并且返回的数据也是新的实例的数据